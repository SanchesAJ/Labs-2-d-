#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <string.h>

const char Base64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

int tobit(char *bufA, int *birr) {
	int size[8]; int y = 0;
	int birar[24];
	int stop = 0;
	for (int j = 0; j < 3; ++j) {
		int i = 0;
		if (bufA[j] == '\n') {
			stop = 1;
		}
		int sim = bufA[j];
		while (i < 8) {
			size[i] = sim % 2;
			sim /= 2;
			i++;
		}
		for (int t = 0; t < 4; ++t) {
			int temp = size[t];
			size[t] = size[7 - t];
			size[7 - t] = temp;
		}
		if (stop != 1) {
			for (int t = 0; t < 8; t++) {
				birar[t + y] = size[t];
			}
		}
		y += 8;

	}
	int count = 0;
	for (int i = 0; i < 24; ++i) {
		if ((birar[i] == 1) || (birar[i] == 0))
			count++;
		birr[i] = birar[i];
	}
	return count;
}

int chekFile(FILE * f) {
	if (f == NULL)
		return 0;
	int n = !feof(f);
	return n;
}

void encode(FILE *input, FILE *output, int Translate, int long rem) {
	char *buf = malloc(3 * sizeof(char));
	int *bitbuf = malloc(24 * sizeof(int));
	long int countTranslate = 0;


	while (chekFile(input)) {
		fread(buf, sizeof(char), 3, input);
		int count = tobit(buf, bitbuf);
		int e = 0;

		for (e; e < count;) {
			int sum = 0;
			for (int i = 0; i < 6; ++i) {
				sum = (sum * 2) + bitbuf[i + e];
			}
			e += 6;
			if (e > count) {
				printf("=");
				break;
			}
			printf("%c", Base64[sum]);
			//fprintf(output,"%c", Base64[sum]);

		}

		if ((Translate)) {
			countTranslate += 3;
			if ((rem <= countTranslate)) {
				char *FirstBuf = malloc(rem * sizeof(char));
				int one = (countTranslate % rem);
				fseek(input, -rem, SEEK_CUR /*- one*/);
				int r = fread(FirstBuf, sizeof(char), rem, input);
				FirstBuf[r] = '\0';
				countTranslate = 0;
				printf("\n%s\n", FirstBuf);
			}
			//Подшаманить вывод в файл
		}

	}


}

void decode(FILE *input, FILE *output, int miss) {
	char *buf = malloc(3 * sizeof(char));
	int *bitbuf = malloc(24 * sizeof(int));
	while (chekFile(input)) {
		fread(buf, sizeof(char), 4, input);

		int y = 0;
		int birar[24] = { 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 };
		int sim;
		int rerun = 0;
		for (int j = 0; j < 4; ++j) {
			if (rerun) {
				j--;
				rerun = 0;
			}
			int size[6] = { 8,8,8,8,8,8 };
			int i = 0; int r = 0;
			
			for (r; r <= 64; r++) {
				if (Base64[r] == buf[j]) {
					sim = r;
					break;
				}

			}
			if (!miss) {
				if ((buf[j] != '=') && (r > 64)) {
					printf("\nERROR\n");
					return;
				}
			}
			else
			{
				if (((buf[j] != '=') && (r > 64))||(buf[j] == ' ') || (buf[j] == '\n')) {
					int e=j;
					int f = j;
					for ( f ; f < 4 - j; ++f) {
						buf[f] = buf[f + 1];
						e = f;
					}
					fscanf(input, "%c", &buf[e]);
					rerun = 1;
					continue;
				}	
			}


			while (i < 6) {
				size[i] = sim % 2;
				sim /= 2;
				i++;
			}
			for (int t = 0; t < 3; ++t) {
				int temp = size[t];
				size[t] = size[5 - t];
				size[5 - t] = temp;
			}

			for (int t = 0; t < 6; t++) {
				birar[t + y] = size[t];
			}
			y += 6;

		}
		int e = 0;
		for (e; e < 24;) {
			int sum = 0;
			for (int i = 0; i < 8; ++i) {
				sum = (sum * 2) + birar[i + e];
			}
			e += 8;
			printf("%c", sum);
		}
	}
}

int main(char mode, char argv, long  int count, char argi) {
	FILE *in = fopen("in.txt", "r");
	FILE *out = fopen("out.txt", "r");
	int Translate = 0;
	long int modeCount = 0;
	
		Translate = 0;
		modeCount = 40;
	
	int ignore = 0;
		ignore = 1;
		mode = 'e';
	switch (mode)
	{
	case 'e': {encode(in, out, Translate, modeCount);
		break;
	}
	case 'd': {
		decode(out, out, ignore);
		break;
	}
	}

	fclose(in);
	fclose(out);
	return 0;
}


/*argv[1] = "e";
	argv[2] = "in.txt";
	argv[3] = "out.txt";
	argv[4] = "i";

		for (int i = 0; i < argc; i++) {
			// Выводим список аргументов в цикле
			printf("%s\n",argv[i]);
		}

	int Translate = 0;
	long int modeCount = 0;

	char mode=argv[1];
	FILE *in = fopen(argv[2], "r");
	FILE *out = fopen(argv[3], "w");

	int ignore = 0;
	if (argv[4] == 'i')
		ignore = 1;
	*/
